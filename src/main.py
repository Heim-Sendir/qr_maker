import argparse
import os

from src.utils.file_utils import FileManager
from src.services.qr_generator import QRGenerator
from src.services.template_render import TemplateRenderer
from src.services.report_generator import ReportGenerator


def main() -> None:
    parser = argparse.ArgumentParser(description='QR Generator Tool')
    parser.add_argument(
        '--qr',
        action='store_true',
        help='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤ –±–µ–∑ —à–∞–±–ª–æ–Ω–∞'
    )
    parser.add_argument(
        '--template',
        action='store_true',
        help='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤ —Å —à–∞–±–ª–æ–Ω–æ–º'
    )
    parser.add_argument(
        '--clean',
        action='store_true',
        help='–û—á–∏—Å—Ç–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ output'
    )

    args = parser.parse_args()

    fm = FileManager()
    report = ReportGenerator(fm)

    if args.qr:
        print('üß© –†–µ–∂–∏–º: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR')
        qr = QRGenerator()
        merchants = fm.read_merchants('data/merchants.csv')

        for m in merchants:
            qr.generate_url(m)
            report.append({
                'id': m.merchant_id,
                'name': m.name,
                'url': m.url,
                'qr_path': getattr(m, 'qr_path', None),
            })
        print('‚úÖ QR-–∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!')

    elif args.template:
        print('üñºÔ∏è –†–µ–∂–∏–º: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR + —à–∞–±–ª–æ–Ω')

        fm = FileManager()
        qr = QRGenerator()
        merchants = fm.read_merchants('data/merchants.csv')

        template = TemplateRenderer('src/templates/base_template.png')
        positions = [
            (494, 244),
            (494, 700),
            (1515, 244),
            (1515, 700)
            ]
        output_dir = fm.get_today_folder()

        for m in merchants:
            qr_img = qr.generate_url_with_template(m)
            combined = template.place_qr(qr_img, positions)
            output_path = os.path.join(output_dir,
                                       f'{m.name}_template.png')
            combined.save(output_path)
            m.qr_path = output_path
            report.append({
                'id': m.merchant_id,
                'name': m.name,
                'url': m.url,
                'qr_path': getattr(m, 'qr_path', None),
            })

    elif args.clean:
        print('üßπ –†–µ–∂–∏–º: –æ—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏')
        fm.clear_output()
        print('‚úÖ –ü–∞–ø–∫–∞ "output" –æ—á–∏—â–µ–Ω–∞')

    else:
        print("‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã --qr, --template –∏–ª–∏ --clean")


if __name__ == "__main__":
    main()
