import argparse
import os

from src.utils.file_utils import FileManager
from src.services.qr_generator import QRGenerator
from src.services.template_render import TemplateRenderer
from src.services.report_generator import ReportGenerator
from src.services.generation_runner import GenerationRunner


def main() -> None:
    parser = argparse.ArgumentParser(description='QR Generator Tool')
    parser.add_argument(
        '--qr',
        action='store_true',
        help='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤ –±–µ–∑ —à–∞–±–ª–æ–Ω–∞'
    )
    parser.add_argument(
        '--template',
        action='store_true',
        help='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤ —Å —à–∞–±–ª–æ–Ω–æ–º'
    )
    parser.add_argument(
        '--clean',
        action='store_true',
        help='–û—á–∏—Å—Ç–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ output'
    )

    args = parser.parse_args()

    fm = FileManager()
    report = ReportGenerator(fm)

    if args.qr:

        qr = QRGenerator()
        merchants = fm.read_merchants('data/merchants.csv')
        report = ReportGenerator(fm)
        runner = GenerationRunner(fm, report, qr)
        runner.run(merchants, mode='qr')

    elif args.template:

        qr = QRGenerator()
        merchants = fm.read_merchants('data/merchants.csv')
        report = ReportGenerator(fm)

        template = TemplateRenderer('src/templates/base_template.png')
        positions = [
            (494, 244),
            (494, 700),
            (1515, 244),
            (1515, 700)
            ]

        runner = GenerationRunner(fm, report, qr, template=template, positions=positions)
        runner.run(merchants, mode='template')


    elif args.clean:
        print('üßπ –†–µ–∂–∏–º: –æ—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏')
        fm.clear_output()
        print('‚úÖ –ü–∞–ø–∫–∞ "output" –æ—á–∏—â–µ–Ω–∞')

    else:
        print("‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã --qr, --template –∏–ª–∏ --clean")


if __name__ == "__main__":
    main()
